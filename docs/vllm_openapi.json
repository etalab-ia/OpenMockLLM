{
    "openapi": "3.1.0",
    "info": {
      "title": "FastAPI",
      "version": "0.1.0"
    },
    "paths": {
      "/health": {
        "get": {
          "summary": "Health",
          "description": "Health check.",
          "operationId": "health_health_get",
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          }
        }
      },
      "/load": {
        "get": {
          "summary": "Get Server Load Metrics",
          "operationId": "get_server_load_metrics_load_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          }
        }
      },
      "/ping": {
        "get": {
          "summary": "Ping",
          "description": "Ping check. Endpoint required for SageMaker",
          "operationId": "ping_ping_get",
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          }
        },
        "post": {
          "summary": "Ping",
          "description": "Ping check. Endpoint required for SageMaker",
          "operationId": "ping_ping_post",
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          }
        }
      },
      "/tokenize": {
        "post": {
          "summary": "Tokenize",
          "operationId": "tokenize_tokenize_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TokenizeCompletionRequest"
                    },
                    {
                      "$ref": "#/components/schemas/TokenizeChatRequest"
                    }
                  ],
                  "title": "Request"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501": {
              "description": "Not Implemented",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/detokenize": {
        "post": {
          "summary": "Detokenize",
          "operationId": "detokenize_detokenize_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetokenizeRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/models": {
        "get": {
          "summary": "Show Available Models",
          "operationId": "show_available_models_v1_models_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          }
        }
      },
      "/version": {
        "get": {
          "summary": "Show Version",
          "operationId": "show_version_version_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          }
        }
      },
      "/v1/responses": {
        "post": {
          "summary": "Create Responses",
          "operationId": "create_responses_v1_responses_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                },
                "text/event-stream": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/responses/{response_id}": {
        "get": {
          "summary": "Retrieve Responses",
          "operationId": "retrieve_responses_v1_responses__response_id__get",
          "parameters": [
            {
              "name": "response_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Response Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/responses/{response_id}/cancel": {
        "post": {
          "summary": "Cancel Responses",
          "operationId": "cancel_responses_v1_responses__response_id__cancel_post",
          "parameters": [
            {
              "name": "response_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Response Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/chat/completions": {
        "post": {
          "summary": "Create Chat Completion",
          "operationId": "create_chat_completion_v1_chat_completions_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                },
                "text/event-stream": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/completions": {
        "post": {
          "summary": "Create Completion",
          "operationId": "create_completion_v1_completions_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                },
                "text/event-stream": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/embeddings": {
        "post": {
          "summary": "Create Embedding",
          "operationId": "create_embedding_v1_embeddings_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/EmbeddingCompletionRequest"
                    },
                    {
                      "$ref": "#/components/schemas/EmbeddingChatRequest"
                    }
                  ],
                  "title": "Request"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/pooling": {
        "post": {
          "summary": "Create Pooling",
          "operationId": "create_pooling_pooling_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/EmbeddingCompletionRequest"
                    },
                    {
                      "$ref": "#/components/schemas/EmbeddingChatRequest"
                    }
                  ],
                  "title": "Request"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/classify": {
        "post": {
          "summary": "Create Classify",
          "operationId": "create_classify_classify_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/score": {
        "post": {
          "summary": "Create Score",
          "operationId": "create_score_score_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScoreRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/score": {
        "post": {
          "summary": "Create Score V1",
          "operationId": "create_score_v1_v1_score_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScoreRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/audio/transcriptions": {
        "post": {
          "summary": "Create Transcriptions",
          "operationId": "create_transcriptions_v1_audio_transcriptions_post",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptionRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                },
                "text/event-stream": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/audio/translations": {
        "post": {
          "summary": "Create Translations",
          "operationId": "create_translations_v1_audio_translations_post",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                },
                "text/event-stream": {}
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/rerank": {
        "post": {
          "summary": "Do Rerank",
          "operationId": "do_rerank_rerank_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RerankRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/rerank": {
        "post": {
          "summary": "Do Rerank V1",
          "operationId": "do_rerank_v1_v1_rerank_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RerankRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/rerank": {
        "post": {
          "summary": "Do Rerank V2",
          "operationId": "do_rerank_v2_v2_rerank_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RerankRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/scale_elastic_ep": {
        "post": {
          "summary": "Scale Elastic Ep",
          "operationId": "scale_elastic_ep_scale_elastic_ep_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "additionalProperties": true,
                    "type": "object",
                    "title": "Response 200 Scale Elastic Ep Scale Elastic Ep Post"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/is_scaling_elastic_ep": {
        "post": {
          "summary": "Is Scaling Elastic Ep",
          "operationId": "is_scaling_elastic_ep_is_scaling_elastic_ep_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          }
        }
      },
      "/invocations": {
        "post": {
          "summary": "Invocations",
          "description": "For SageMaker, routes requests based on the request type.",
          "operationId": "invocations_invocations_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "415": {
              "description": "Unsupported Media Type",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/metrics": {
        "get": {
          "summary": "Metrics",
          "description": "Endpoint that serves Prometheus metrics.",
          "operationId": "metrics_metrics_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "text/plain; version=0.0.4; charset=utf-8": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "ActionClick": {
          "properties": {
            "button": {
              "type": "string",
              "enum": [
                "left",
                "right",
                "wheel",
                "back",
                "forward"
              ],
              "title": "Button"
            },
            "type": {
              "type": "string",
              "const": "click",
              "title": "Type"
            },
            "x": {
              "type": "integer",
              "title": "X"
            },
            "y": {
              "type": "integer",
              "title": "Y"
            }
          },
          "type": "object",
          "required": [
            "button",
            "type",
            "x",
            "y"
          ],
          "title": "ActionClick"
        },
        "ActionDoubleClick": {
          "properties": {
            "type": {
              "type": "string",
              "const": "double_click",
              "title": "Type"
            },
            "x": {
              "type": "integer",
              "title": "X"
            },
            "y": {
              "type": "integer",
              "title": "Y"
            }
          },
          "type": "object",
          "required": [
            "type",
            "x",
            "y"
          ],
          "title": "ActionDoubleClick"
        },
        "ActionDrag": {
          "properties": {
            "path": {
              "items": {
                "$ref": "#/components/schemas/ActionDragPath"
              },
              "type": "array",
              "title": "Path"
            },
            "type": {
              "type": "string",
              "const": "drag",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "path",
            "type"
          ],
          "title": "ActionDrag"
        },
        "ActionDragPath": {
          "properties": {
            "x": {
              "type": "integer",
              "title": "X"
            },
            "y": {
              "type": "integer",
              "title": "Y"
            }
          },
          "type": "object",
          "required": [
            "x",
            "y"
          ],
          "title": "ActionDragPath"
        },
        "ActionKeypress": {
          "properties": {
            "keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Keys"
            },
            "type": {
              "type": "string",
              "const": "keypress",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "keys",
            "type"
          ],
          "title": "ActionKeypress"
        },
        "ActionMove": {
          "properties": {
            "type": {
              "type": "string",
              "const": "move",
              "title": "Type"
            },
            "x": {
              "type": "integer",
              "title": "X"
            },
            "y": {
              "type": "integer",
              "title": "Y"
            }
          },
          "type": "object",
          "required": [
            "type",
            "x",
            "y"
          ],
          "title": "ActionMove"
        },
        "ActionScreenshot": {
          "properties": {
            "type": {
              "type": "string",
              "const": "screenshot",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ActionScreenshot"
        },
        "ActionScroll": {
          "properties": {
            "scroll_x": {
              "type": "integer",
              "title": "Scroll X"
            },
            "scroll_y": {
              "type": "integer",
              "title": "Scroll Y"
            },
            "type": {
              "type": "string",
              "const": "scroll",
              "title": "Type"
            },
            "x": {
              "type": "integer",
              "title": "X"
            },
            "y": {
              "type": "integer",
              "title": "Y"
            }
          },
          "type": "object",
          "required": [
            "scroll_x",
            "scroll_y",
            "type",
            "x",
            "y"
          ],
          "title": "ActionScroll"
        },
        "ActionType": {
          "properties": {
            "text": {
              "type": "string",
              "title": "Text"
            },
            "type": {
              "type": "string",
              "const": "type",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "text",
            "type"
          ],
          "title": "ActionType"
        },
        "ActionWait": {
          "properties": {
            "type": {
              "type": "string",
              "const": "wait",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ActionWait"
        },
        "AnnotationContainerFileCitation": {
          "properties": {
            "container_id": {
              "type": "string",
              "title": "Container Id"
            },
            "end_index": {
              "type": "integer",
              "title": "End Index"
            },
            "file_id": {
              "type": "string",
              "title": "File Id"
            },
            "start_index": {
              "type": "integer",
              "title": "Start Index"
            },
            "type": {
              "type": "string",
              "const": "container_file_citation",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "container_id",
            "end_index",
            "file_id",
            "start_index",
            "type"
          ],
          "title": "AnnotationContainerFileCitation"
        },
        "AnnotationFileCitation": {
          "properties": {
            "file_id": {
              "type": "string",
              "title": "File Id"
            },
            "index": {
              "type": "integer",
              "title": "Index"
            },
            "type": {
              "type": "string",
              "const": "file_citation",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "file_id",
            "index",
            "type"
          ],
          "title": "AnnotationFileCitation"
        },
        "AnnotationFilePath": {
          "properties": {
            "file_id": {
              "type": "string",
              "title": "File Id"
            },
            "index": {
              "type": "integer",
              "title": "Index"
            },
            "type": {
              "type": "string",
              "const": "file_path",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "file_id",
            "index",
            "type"
          ],
          "title": "AnnotationFilePath"
        },
        "AnnotationURLCitation": {
          "properties": {
            "end_index": {
              "type": "integer",
              "title": "End Index"
            },
            "start_index": {
              "type": "integer",
              "title": "Start Index"
            },
            "title": {
              "type": "string",
              "title": "Title"
            },
            "type": {
              "type": "string",
              "const": "url_citation",
              "title": "Type"
            },
            "url": {
              "type": "string",
              "title": "Url"
            }
          },
          "type": "object",
          "required": [
            "end_index",
            "start_index",
            "title",
            "type",
            "url"
          ],
          "title": "AnnotationURLCitation"
        },
        "Audio": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            }
          },
          "type": "object",
          "required": [
            "id"
          ],
          "title": "Audio"
        },
        "AudioURL": {
          "properties": {
            "url": {
              "type": "string",
              "title": "Url"
            }
          },
          "type": "object",
          "required": [
            "url"
          ],
          "title": "AudioURL"
        },
        "BaseModel": {
          "properties": {},
          "type": "object",
          "title": "BaseModel"
        },
        "ChatCompletionAssistantMessageParam": {
          "properties": {
            "role": {
              "type": "string",
              "const": "assistant",
              "title": "Role"
            },
            "audio": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Audio"
                },
                {
                  "type": "null"
                }
              ]
            },
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartRefusalParam"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Content"
            },
            "function_call": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FunctionCall"
                },
                {
                  "type": "null"
                }
              ]
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "refusal": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Refusal"
            },
            "tool_calls": {
              "items": {
                "$ref": "#/components/schemas/ChatCompletionMessageToolCallParam"
              },
              "type": "array",
              "title": "Tool Calls"
            }
          },
          "type": "object",
          "required": [
            "role"
          ],
          "title": "ChatCompletionAssistantMessageParam"
        },
        "ChatCompletionContentPartAudioParam": {
          "properties": {
            "audio_url": {
              "$ref": "#/components/schemas/AudioURL"
            },
            "type": {
              "type": "string",
              "const": "audio_url",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "audio_url",
            "type"
          ],
          "title": "ChatCompletionContentPartAudioParam"
        },
        "ChatCompletionContentPartImageEmbedsParam": {
          "properties": {
            "image_embeds": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                }
              ],
              "title": "Image Embeds"
            },
            "type": {
              "type": "string",
              "const": "image_embeds",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "image_embeds",
            "type"
          ],
          "title": "ChatCompletionContentPartImageEmbedsParam"
        },
        "ChatCompletionContentPartImageParam": {
          "properties": {
            "image_url": {
              "$ref": "#/components/schemas/ImageURL"
            },
            "type": {
              "type": "string",
              "const": "image_url",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "image_url",
            "type"
          ],
          "title": "ChatCompletionContentPartImageParam"
        },
        "ChatCompletionContentPartInputAudioParam": {
          "properties": {
            "input_audio": {
              "$ref": "#/components/schemas/InputAudio"
            },
            "type": {
              "type": "string",
              "const": "input_audio",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "input_audio",
            "type"
          ],
          "title": "ChatCompletionContentPartInputAudioParam"
        },
        "ChatCompletionContentPartRefusalParam": {
          "properties": {
            "refusal": {
              "type": "string",
              "title": "Refusal"
            },
            "type": {
              "type": "string",
              "const": "refusal",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "refusal",
            "type"
          ],
          "title": "ChatCompletionContentPartRefusalParam"
        },
        "ChatCompletionContentPartTextParam": {
          "properties": {
            "text": {
              "type": "string",
              "title": "Text"
            },
            "type": {
              "type": "string",
              "const": "text",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "text",
            "type"
          ],
          "title": "ChatCompletionContentPartTextParam"
        },
        "ChatCompletionContentPartVideoParam": {
          "properties": {
            "video_url": {
              "$ref": "#/components/schemas/VideoURL"
            },
            "type": {
              "type": "string",
              "const": "video_url",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "video_url",
            "type"
          ],
          "title": "ChatCompletionContentPartVideoParam"
        },
        "ChatCompletionDeveloperMessageParam": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "role": {
              "type": "string",
              "const": "developer",
              "title": "Role"
            },
            "name": {
              "type": "string",
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "content",
            "role"
          ],
          "title": "ChatCompletionDeveloperMessageParam"
        },
        "ChatCompletionFunctionMessageParam": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Content"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "role": {
              "type": "string",
              "const": "function",
              "title": "Role"
            }
          },
          "type": "object",
          "required": [
            "content",
            "name",
            "role"
          ],
          "title": "ChatCompletionFunctionMessageParam"
        },
        "ChatCompletionMessageToolCallParam": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "function": {
              "$ref": "#/components/schemas/Function"
            },
            "type": {
              "type": "string",
              "const": "function",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "id",
            "function",
            "type"
          ],
          "title": "ChatCompletionMessageToolCallParam"
        },
        "ChatCompletionNamedFunction": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "name"
          ],
          "title": "ChatCompletionNamedFunction"
        },
        "ChatCompletionNamedToolChoiceParam": {
          "properties": {
            "function": {
              "$ref": "#/components/schemas/ChatCompletionNamedFunction"
            },
            "type": {
              "type": "string",
              "const": "function",
              "title": "Type",
              "default": "function"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "function"
          ],
          "title": "ChatCompletionNamedToolChoiceParam"
        },
        "ChatCompletionRequest": {
          "properties": {
            "messages": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionDeveloperMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionSystemMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionUserMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionAssistantMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionToolMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionFunctionMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/CustomChatCompletionMessageParam"
                  }
                ]
              },
              "type": "array",
              "title": "Messages"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "frequency_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Frequency Penalty",
              "default": 0
            },
            "logit_bias": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "number"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Logit Bias"
            },
            "logprobs": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Logprobs",
              "default": false
            },
            "top_logprobs": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top Logprobs",
              "default": 0
            },
            "max_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Tokens",
              "deprecated": true
            },
            "max_completion_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Completion Tokens"
            },
            "n": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "N",
              "default": 1
            },
            "presence_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Presence Penalty",
              "default": 0
            },
            "response_format": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResponseFormat"
                },
                {
                  "$ref": "#/components/schemas/StructuralTagResponseFormat"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Response Format"
            },
            "seed": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 9223372036854776000,
                  "minimum": -9223372036854776000
                },
                {
                  "type": "null"
                }
              ],
              "title": "Seed"
            },
            "stop": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stop",
              "default": []
            },
            "stream": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream",
              "default": false
            },
            "stream_options": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StreamOptions"
                },
                {
                  "type": "null"
                }
              ]
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            },
            "top_p": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top P"
            },
            "tools": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/ChatCompletionToolsParam"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools"
            },
            "tool_choice": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "none"
                },
                {
                  "type": "string",
                  "const": "auto"
                },
                {
                  "type": "string",
                  "const": "required"
                },
                {
                  "$ref": "#/components/schemas/ChatCompletionNamedToolChoiceParam"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Choice",
              "default": "none"
            },
            "parallel_tool_calls": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Parallel Tool Calls",
              "default": false
            },
            "user": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User"
            },
            "best_of": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Best Of"
            },
            "use_beam_search": {
              "type": "boolean",
              "title": "Use Beam Search",
              "default": false
            },
            "top_k": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top K"
            },
            "min_p": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min P"
            },
            "repetition_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Repetition Penalty"
            },
            "length_penalty": {
              "type": "number",
              "title": "Length Penalty",
              "default": 1
            },
            "stop_token_ids": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stop Token Ids",
              "default": []
            },
            "include_stop_str_in_output": {
              "type": "boolean",
              "title": "Include Stop Str In Output",
              "default": false
            },
            "ignore_eos": {
              "type": "boolean",
              "title": "Ignore Eos",
              "default": false
            },
            "min_tokens": {
              "type": "integer",
              "title": "Min Tokens",
              "default": 0
            },
            "skip_special_tokens": {
              "type": "boolean",
              "title": "Skip Special Tokens",
              "default": true
            },
            "spaces_between_special_tokens": {
              "type": "boolean",
              "title": "Spaces Between Special Tokens",
              "default": true
            },
            "truncate_prompt_tokens": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Truncate Prompt Tokens"
            },
            "prompt_logprobs": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Logprobs"
            },
            "allowed_token_ids": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Allowed Token Ids"
            },
            "bad_words": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Bad Words"
            },
            "echo": {
              "type": "boolean",
              "title": "Echo",
              "description": "If true, the new message will be prepended with the last message if they belong to the same role.",
              "default": false
            },
            "add_generation_prompt": {
              "type": "boolean",
              "title": "Add Generation Prompt",
              "description": "If true, the generation prompt will be added to the chat template. This is a parameter used by chat template in tokenizer config of the model.",
              "default": true
            },
            "continue_final_message": {
              "type": "boolean",
              "title": "Continue Final Message",
              "description": "If this is set, the chat will be formatted so that the final message in the chat is open-ended, without any EOS tokens. The model will continue this message rather than starting a new one. This allows you to \"prefill\" part of the model's response for it. Cannot be used at the same time as `add_generation_prompt`.",
              "default": false
            },
            "add_special_tokens": {
              "type": "boolean",
              "title": "Add Special Tokens",
              "description": "If true, special tokens (e.g. BOS) will be added to the prompt on top of what is added by the chat template. For most models, the chat template takes care of adding the special tokens so this should be set to false (as is the default).",
              "default": false
            },
            "documents": {
              "anyOf": [
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Documents",
              "description": "A list of dicts representing documents that will be accessible to the model if it is performing RAG (retrieval-augmented generation). If the template does not support RAG, this argument will have no effect. We recommend that each document should be a dict containing \"title\" and \"text\" keys."
            },
            "chat_template": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chat Template",
              "description": "A Jinja template to use for this conversion. As of transformers v4.44, default chat template is no longer allowed, so you must provide a chat template if the tokenizer does not define one."
            },
            "chat_template_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chat Template Kwargs",
              "description": "Additional keyword args to pass to the template renderer. Will be accessible by the chat template."
            },
            "mm_processor_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mm Processor Kwargs",
              "description": "Additional kwargs to pass to the HF processor."
            },
            "guided_json": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "$ref": "#/components/schemas/BaseModel"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Json",
              "description": "If specified, the output will follow the JSON schema."
            },
            "guided_regex": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Regex",
              "description": "If specified, the output will follow the regex pattern."
            },
            "guided_choice": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Choice",
              "description": "If specified, the output will be exactly one of the choices."
            },
            "guided_grammar": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Grammar",
              "description": "If specified, the output will follow the context free grammar."
            },
            "structural_tag": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Structural Tag",
              "description": "If specified, the output will follow the structural tag schema."
            },
            "guided_decoding_backend": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Decoding Backend",
              "description": "If specified, will override the default guided decoding backend of the server for this specific request. If set, must be either 'outlines' / 'lm-format-enforcer'"
            },
            "guided_whitespace_pattern": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Whitespace Pattern",
              "description": "If specified, will override the default whitespace pattern for guided json decoding."
            },
            "priority": {
              "type": "integer",
              "title": "Priority",
              "description": "The priority of the request (lower means earlier handling; default: 0). Any priority other than 0 will raise an error if the served model does not use priority scheduling.",
              "default": 0
            },
            "request_id": {
              "type": "string",
              "title": "Request Id",
              "description": "The request_id related to this request. If the caller does not set it, a random_uuid will be generated. This id is used through out the inference process and return in response."
            },
            "logits_processors": {
              "anyOf": [
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/LogitsProcessorConstructor"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Logits Processors",
              "description": "A list of either qualified names of logits processors, or constructor objects, to apply when sampling. A constructor is a JSON object with a required 'qualname' field specifying the qualified name of the processor class/factory, and optional 'args' and 'kwargs' fields containing positional and keyword arguments. For example: {'qualname': 'my_module.MyLogitsProcessor', 'args': [1, 2], 'kwargs': {'param': 'value'}}."
            },
            "return_tokens_as_token_ids": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Return Tokens As Token Ids",
              "description": "If specified with 'logprobs', tokens are represented  as strings of the form 'token_id:{token_id}' so that tokens that are not JSON-encodable can be identified."
            },
            "cache_salt": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cache Salt",
              "description": "If specified, the prefix cache will be salted with the provided string to prevent an attacker to guess prompts in multi-user environments. The salt should be random, protected from access by 3rd parties, and long enough to be unpredictable (e.g., 43 characters base64-encoded, corresponding to 256 bit). Not supported by vLLM engine V0."
            },
            "kv_transfer_params": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Kv Transfer Params",
              "description": "KVTransfer parameters used for disaggregated serving."
            },
            "vllm_xargs": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Vllm Xargs",
              "description": "Additional request parameters with string or numeric values, used by custom extensions."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "messages"
          ],
          "title": "ChatCompletionRequest"
        },
        "ChatCompletionSystemMessageParam": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "role": {
              "type": "string",
              "const": "system",
              "title": "Role"
            },
            "name": {
              "type": "string",
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "content",
            "role"
          ],
          "title": "ChatCompletionSystemMessageParam"
        },
        "ChatCompletionToolMessageParam": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "role": {
              "type": "string",
              "const": "tool",
              "title": "Role"
            },
            "tool_call_id": {
              "type": "string",
              "title": "Tool Call Id"
            }
          },
          "type": "object",
          "required": [
            "content",
            "role",
            "tool_call_id"
          ],
          "title": "ChatCompletionToolMessageParam"
        },
        "ChatCompletionToolsParam": {
          "properties": {
            "type": {
              "type": "string",
              "const": "function",
              "title": "Type",
              "default": "function"
            },
            "function": {
              "$ref": "#/components/schemas/FunctionDefinition"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "function"
          ],
          "title": "ChatCompletionToolsParam"
        },
        "ChatCompletionUserMessageParam": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartImageParam"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartInputAudioParam"
                      },
                      {
                        "$ref": "#/components/schemas/File"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "role": {
              "type": "string",
              "const": "user",
              "title": "Role"
            },
            "name": {
              "type": "string",
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "content",
            "role"
          ],
          "title": "ChatCompletionUserMessageParam"
        },
        "ClassificationRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "input": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Input"
            },
            "truncate_prompt_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Truncate Prompt Tokens"
            },
            "user": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User"
            },
            "priority": {
              "type": "integer",
              "title": "Priority",
              "description": "The priority of the request (lower means earlier handling; default: 0). Any priority other than 0 will raise an error if the served model does not use priority scheduling.",
              "default": 0
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "input"
          ],
          "title": "ClassificationRequest"
        },
        "CodeInterpreter": {
          "properties": {
            "container": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/CodeInterpreterContainerCodeInterpreterToolAuto"
                }
              ],
              "title": "Container"
            },
            "type": {
              "type": "string",
              "const": "code_interpreter",
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "container",
            "type"
          ],
          "title": "CodeInterpreter"
        },
        "CodeInterpreterContainerCodeInterpreterToolAuto": {
          "properties": {
            "type": {
              "type": "string",
              "const": "auto",
              "title": "Type"
            },
            "file_ids": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Ids"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "CodeInterpreterContainerCodeInterpreterToolAuto"
        },
        "ComparisonFilter": {
          "properties": {
            "key": {
              "type": "string",
              "title": "Key"
            },
            "type": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte"
              ],
              "title": "Type"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ],
              "title": "Value"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "key",
            "type",
            "value"
          ],
          "title": "ComparisonFilter"
        },
        "CompletionRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "prompt": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt"
            },
            "prompt_embeds": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "binary"
                },
                {
                  "items": {
                    "type": "string",
                    "format": "binary"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Embeds"
            },
            "best_of": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Best Of"
            },
            "echo": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Echo",
              "default": false
            },
            "frequency_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Frequency Penalty",
              "default": 0
            },
            "logit_bias": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "number"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Logit Bias"
            },
            "logprobs": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Logprobs"
            },
            "max_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Tokens",
              "default": 16
            },
            "n": {
              "type": "integer",
              "title": "N",
              "default": 1
            },
            "presence_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Presence Penalty",
              "default": 0
            },
            "seed": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 9223372036854776000,
                  "minimum": -9223372036854776000
                },
                {
                  "type": "null"
                }
              ],
              "title": "Seed"
            },
            "stop": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stop",
              "default": []
            },
            "stream": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream",
              "default": false
            },
            "stream_options": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StreamOptions"
                },
                {
                  "type": "null"
                }
              ]
            },
            "suffix": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Suffix"
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            },
            "top_p": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top P"
            },
            "user": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User"
            },
            "use_beam_search": {
              "type": "boolean",
              "title": "Use Beam Search",
              "default": false
            },
            "top_k": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top K"
            },
            "min_p": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min P"
            },
            "repetition_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Repetition Penalty"
            },
            "length_penalty": {
              "type": "number",
              "title": "Length Penalty",
              "default": 1
            },
            "stop_token_ids": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stop Token Ids",
              "default": []
            },
            "include_stop_str_in_output": {
              "type": "boolean",
              "title": "Include Stop Str In Output",
              "default": false
            },
            "ignore_eos": {
              "type": "boolean",
              "title": "Ignore Eos",
              "default": false
            },
            "min_tokens": {
              "type": "integer",
              "title": "Min Tokens",
              "default": 0
            },
            "skip_special_tokens": {
              "type": "boolean",
              "title": "Skip Special Tokens",
              "default": true
            },
            "spaces_between_special_tokens": {
              "type": "boolean",
              "title": "Spaces Between Special Tokens",
              "default": true
            },
            "truncate_prompt_tokens": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Truncate Prompt Tokens"
            },
            "allowed_token_ids": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Allowed Token Ids"
            },
            "prompt_logprobs": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Logprobs"
            },
            "add_special_tokens": {
              "type": "boolean",
              "title": "Add Special Tokens",
              "description": "If true (the default), special tokens (e.g. BOS) will be added to the prompt.",
              "default": true
            },
            "response_format": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResponseFormat"
                },
                {
                  "$ref": "#/components/schemas/StructuralTagResponseFormat"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Response Format",
              "description": "Similar to chat completion, this parameter specifies the format of output. Only {'type': 'json_object'}, {'type': 'json_schema'}, {'type': 'structural_tag'}, or {'type': 'text' } is supported."
            },
            "guided_json": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "$ref": "#/components/schemas/BaseModel"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Json",
              "description": "If specified, the output will follow the JSON schema."
            },
            "guided_regex": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Regex",
              "description": "If specified, the output will follow the regex pattern."
            },
            "guided_choice": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Choice",
              "description": "If specified, the output will be exactly one of the choices."
            },
            "guided_grammar": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Grammar",
              "description": "If specified, the output will follow the context free grammar."
            },
            "guided_decoding_backend": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Decoding Backend",
              "description": "If specified, will override the default guided decoding backend of the server for this specific request. If set, must be one of 'outlines' / 'lm-format-enforcer'"
            },
            "guided_whitespace_pattern": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guided Whitespace Pattern",
              "description": "If specified, will override the default whitespace pattern for guided json decoding."
            },
            "priority": {
              "type": "integer",
              "title": "Priority",
              "description": "The priority of the request (lower means earlier handling; default: 0). Any priority other than 0 will raise an error if the served model does not use priority scheduling.",
              "default": 0
            },
            "logits_processors": {
              "anyOf": [
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/LogitsProcessorConstructor"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Logits Processors",
              "description": "A list of either qualified names of logits processors, or constructor objects, to apply when sampling. A constructor is a JSON object with a required 'qualname' field specifying the qualified name of the processor class/factory, and optional 'args' and 'kwargs' fields containing positional and keyword arguments. For example: {'qualname': 'my_module.MyLogitsProcessor', 'args': [1, 2], 'kwargs': {'param': 'value'}}."
            },
            "return_tokens_as_token_ids": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Return Tokens As Token Ids",
              "description": "If specified with 'logprobs', tokens are represented  as strings of the form 'token_id:{token_id}' so that tokens that are not JSON-encodable can be identified."
            },
            "cache_salt": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cache Salt",
              "description": "If specified, the prefix cache will be salted with the provided string to prevent an attacker to guess prompts in multi-user environments. The salt should be random, protected from access by 3rd parties, and long enough to be unpredictable (e.g., 43 characters base64-encoded, corresponding to 256 bit). Not supported by vLLM engine V0."
            },
            "kv_transfer_params": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Kv Transfer Params",
              "description": "KVTransfer parameters used for disaggregated serving."
            },
            "vllm_xargs": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Vllm Xargs",
              "description": "Additional request parameters with string or numeric values, used by custom extensions."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "CompletionRequest"
        },
        "CompoundFilter": {
          "properties": {
            "filters": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ComparisonFilter"
                  },
                  {}
                ]
              },
              "type": "array",
              "title": "Filters"
            },
            "type": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "filters",
            "type"
          ],
          "title": "CompoundFilter"
        },
        "ComputerCallOutput": {
          "properties": {
            "call_id": {
              "type": "string",
              "title": "Call Id"
            },
            "output": {
              "$ref": "#/components/schemas/ResponseComputerToolCallOutputScreenshotParam"
            },
            "type": {
              "type": "string",
              "const": "computer_call_output",
              "title": "Type"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "acknowledged_safety_checks": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/ComputerCallOutputAcknowledgedSafetyCheck"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Acknowledged Safety Checks"
            },
            "status": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "in_progress",
                    "completed",
                    "incomplete"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          "type": "object",
          "required": [
            "call_id",
            "output",
            "type"
          ],
          "title": "ComputerCallOutput"
        },
        "ComputerCallOutputAcknowledgedSafetyCheck": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "code": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Code"
            },
            "message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "id"
          ],
          "title": "ComputerCallOutputAcknowledgedSafetyCheck"
        },
        "ComputerTool": {
          "properties": {
            "display_height": {
              "type": "integer",
              "title": "Display Height"
            },
            "display_width": {
              "type": "integer",
              "title": "Display Width"
            },
            "environment": {
              "type": "string",
              "enum": [
                "windows",
                "mac",
                "linux",
                "ubuntu",
                "browser"
              ],
              "title": "Environment"
            },
            "type": {
              "type": "string",
              "const": "computer_use_preview",
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "display_height",
            "display_width",
            "environment",
            "type"
          ],
          "title": "ComputerTool"
        },
        "CustomChatCompletionContentSimpleAudioParam": {
          "properties": {
            "audio_url": {
              "type": "string",
              "title": "Audio Url"
            }
          },
          "type": "object",
          "required": [
            "audio_url"
          ],
          "title": "CustomChatCompletionContentSimpleAudioParam",
          "description": "A simpler version of the param that only accepts a plain audio_url.\n\nExample:\n{\n    \"audio_url\": \"https://example.com/audio.mp3\"\n}"
        },
        "CustomChatCompletionContentSimpleImageParam": {
          "properties": {
            "image_url": {
              "type": "string",
              "title": "Image Url"
            }
          },
          "type": "object",
          "required": [
            "image_url"
          ],
          "title": "CustomChatCompletionContentSimpleImageParam",
          "description": "A simpler version of the param that only accepts a plain image_url.\nThis is supported by OpenAI API, although it is not documented.\n\nExample:\n{\n    \"image_url\": \"https://example.com/image.jpg\"\n}"
        },
        "CustomChatCompletionContentSimpleVideoParam": {
          "properties": {
            "video_url": {
              "type": "string",
              "title": "Video Url"
            }
          },
          "type": "object",
          "required": [
            "video_url"
          ],
          "title": "CustomChatCompletionContentSimpleVideoParam",
          "description": "A simpler version of the param that only accepts a plain audio_url.\n\nExample:\n{\n    \"video_url\": \"https://example.com/video.mp4\"\n}"
        },
        "CustomChatCompletionMessageParam": {
          "properties": {
            "role": {
              "type": "string",
              "title": "Role"
            },
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartImageParam"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartInputAudioParam"
                      },
                      {
                        "$ref": "#/components/schemas/File"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartAudioParam"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartVideoParam"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartRefusalParam"
                      },
                      {
                        "$ref": "#/components/schemas/CustomChatCompletionContentSimpleImageParam"
                      },
                      {
                        "$ref": "#/components/schemas/ChatCompletionContentPartImageEmbedsParam"
                      },
                      {
                        "$ref": "#/components/schemas/CustomChatCompletionContentSimpleAudioParam"
                      },
                      {
                        "$ref": "#/components/schemas/CustomChatCompletionContentSimpleVideoParam"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/CustomThinkCompletionContentParam"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "tool_call_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Call Id"
            },
            "tool_calls": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/ChatCompletionMessageToolCallParam"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Calls"
            }
          },
          "type": "object",
          "required": [
            "role"
          ],
          "title": "CustomChatCompletionMessageParam",
          "description": "Enables custom roles in the Chat Completion API."
        },
        "CustomThinkCompletionContentParam": {
          "properties": {
            "thinking": {
              "type": "string",
              "title": "Thinking"
            },
            "closed": {
              "type": "boolean",
              "title": "Closed"
            },
            "type": {
              "type": "string",
              "const": "thinking",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "thinking",
            "type"
          ],
          "title": "CustomThinkCompletionContentParam",
          "description": "A Think Completion Content Param that accepts a plain text and a boolean.\n\nExample:\n{\n    \"thinking\": \"I am thinking about the answer\",\n    \"closed\": True,\n    \"type\": \"thinking\"\n}"
        },
        "DetokenizeRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "tokens": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Tokens"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "tokens"
          ],
          "title": "DetokenizeRequest"
        },
        "EasyInputMessageParam": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/ResponseInputTextParam"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseInputImageParam"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseInputFileParam"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "role": {
              "type": "string",
              "enum": [
                "user",
                "assistant",
                "system",
                "developer"
              ],
              "title": "Role"
            },
            "type": {
              "type": "string",
              "const": "message",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "content",
            "role"
          ],
          "title": "EasyInputMessageParam"
        },
        "EmbeddingChatRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "messages": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionDeveloperMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionSystemMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionUserMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionAssistantMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionToolMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionFunctionMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/CustomChatCompletionMessageParam"
                  }
                ]
              },
              "type": "array",
              "title": "Messages"
            },
            "encoding_format": {
              "type": "string",
              "enum": [
                "float",
                "base64"
              ],
              "title": "Encoding Format",
              "default": "float"
            },
            "dimensions": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dimensions"
            },
            "user": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User"
            },
            "truncate_prompt_tokens": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": -1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Truncate Prompt Tokens"
            },
            "add_special_tokens": {
              "type": "boolean",
              "title": "Add Special Tokens",
              "description": "If true, special tokens (e.g. BOS) will be added to the prompt on top of what is added by the chat template. For most models, the chat template takes care of adding the special tokens so this should be set to false (as is the default).",
              "default": false
            },
            "chat_template": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chat Template",
              "description": "A Jinja template to use for this conversion. As of transformers v4.44, default chat template is no longer allowed, so you must provide a chat template if the tokenizer does not define one."
            },
            "chat_template_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chat Template Kwargs",
              "description": "Additional keyword args to pass to the template renderer. Will be accessible by the chat template."
            },
            "mm_processor_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mm Processor Kwargs",
              "description": "Additional kwargs to pass to the HF processor."
            },
            "priority": {
              "type": "integer",
              "title": "Priority",
              "description": "The priority of the request (lower means earlier handling; default: 0). Any priority other than 0 will raise an error if the served model does not use priority scheduling.",
              "default": 0
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "messages"
          ],
          "title": "EmbeddingChatRequest"
        },
        "EmbeddingCompletionRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "input": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Input"
            },
            "encoding_format": {
              "type": "string",
              "enum": [
                "float",
                "base64"
              ],
              "title": "Encoding Format",
              "default": "float"
            },
            "dimensions": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dimensions"
            },
            "user": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User"
            },
            "truncate_prompt_tokens": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": -1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Truncate Prompt Tokens"
            },
            "add_special_tokens": {
              "type": "boolean",
              "title": "Add Special Tokens",
              "description": "If true (the default), special tokens (e.g. BOS) will be added to the prompt.",
              "default": true
            },
            "priority": {
              "type": "integer",
              "title": "Priority",
              "description": "The priority of the request (lower means earlier handling; default: 0). Any priority other than 0 will raise an error if the served model does not use priority scheduling.",
              "default": 0
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "input"
          ],
          "title": "EmbeddingCompletionRequest"
        },
        "ErrorResponse": {
          "properties": {
            "object": {
              "type": "string",
              "title": "Object",
              "default": "error"
            },
            "message": {
              "type": "string",
              "title": "Message"
            },
            "type": {
              "type": "string",
              "title": "Type"
            },
            "param": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Param"
            },
            "code": {
              "type": "integer",
              "title": "Code"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "message",
            "type",
            "code"
          ],
          "title": "ErrorResponse"
        },
        "File": {
          "properties": {
            "file": {
              "$ref": "#/components/schemas/FileFile"
            },
            "type": {
              "type": "string",
              "const": "file",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "file",
            "type"
          ],
          "title": "File"
        },
        "FileFile": {
          "properties": {
            "file_data": {
              "type": "string",
              "title": "File Data"
            },
            "file_id": {
              "type": "string",
              "title": "File Id"
            },
            "filename": {
              "type": "string",
              "title": "Filename"
            }
          },
          "type": "object",
          "title": "FileFile"
        },
        "FileSearchTool": {
          "properties": {
            "type": {
              "type": "string",
              "const": "file_search",
              "title": "Type"
            },
            "vector_store_ids": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Vector Store Ids"
            },
            "filters": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ComparisonFilter"
                },
                {
                  "$ref": "#/components/schemas/CompoundFilter"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "max_num_results": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Num Results"
            },
            "ranking_options": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RankingOptions"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type",
            "vector_store_ids"
          ],
          "title": "FileSearchTool"
        },
        "Function": {
          "properties": {
            "arguments": {
              "type": "string",
              "title": "Arguments"
            },
            "name": {
              "type": "string",
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "arguments",
            "name"
          ],
          "title": "Function"
        },
        "FunctionCall": {
          "properties": {
            "arguments": {
              "type": "string",
              "title": "Arguments"
            },
            "name": {
              "type": "string",
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "arguments",
            "name"
          ],
          "title": "FunctionCall"
        },
        "FunctionCallOutput": {
          "properties": {
            "call_id": {
              "type": "string",
              "title": "Call Id"
            },
            "output": {
              "type": "string",
              "title": "Output"
            },
            "type": {
              "type": "string",
              "const": "function_call_output",
              "title": "Type"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "status": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "in_progress",
                    "completed",
                    "incomplete"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          "type": "object",
          "required": [
            "call_id",
            "output",
            "type"
          ],
          "title": "FunctionCallOutput"
        },
        "FunctionDefinition": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "parameters": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Parameters"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "name"
          ],
          "title": "FunctionDefinition"
        },
        "FunctionTool": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "parameters": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Parameters"
            },
            "strict": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Strict"
            },
            "type": {
              "type": "string",
              "const": "function",
              "title": "Type"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "name",
            "type"
          ],
          "title": "FunctionTool"
        },
        "HTTPValidationError": {
          "properties": {
            "detail": {
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              },
              "type": "array",
              "title": "Detail"
            }
          },
          "type": "object",
          "title": "HTTPValidationError"
        },
        "ImageGeneration": {
          "properties": {
            "type": {
              "type": "string",
              "const": "image_generation",
              "title": "Type"
            },
            "background": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "transparent",
                    "opaque",
                    "auto"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Background"
            },
            "input_image_mask": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ImageGenerationInputImageMask"
                },
                {
                  "type": "null"
                }
              ]
            },
            "model": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "gpt-image-1"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "moderation": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto",
                    "low"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Moderation"
            },
            "output_compression": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Compression"
            },
            "output_format": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "png",
                    "webp",
                    "jpeg"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Format"
            },
            "partial_images": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Partial Images"
            },
            "quality": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high",
                    "auto"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Quality"
            },
            "size": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "1024x1024",
                    "1024x1536",
                    "1536x1024",
                    "auto"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Size"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ImageGeneration"
        },
        "ImageGenerationCall": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "result": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Result"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "generating",
                "failed"
              ],
              "title": "Status"
            },
            "type": {
              "type": "string",
              "const": "image_generation_call",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "id",
            "result",
            "status",
            "type"
          ],
          "title": "ImageGenerationCall"
        },
        "ImageGenerationInputImageMask": {
          "properties": {
            "file_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Id"
            },
            "image_url": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Image Url"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "ImageGenerationInputImageMask"
        },
        "ImageURL": {
          "properties": {
            "url": {
              "type": "string",
              "title": "Url"
            },
            "detail": {
              "type": "string",
              "enum": [
                "auto",
                "low",
                "high"
              ],
              "title": "Detail"
            }
          },
          "type": "object",
          "required": [
            "url"
          ],
          "title": "ImageURL"
        },
        "InputAudio": {
          "properties": {
            "data": {
              "type": "string",
              "title": "Data"
            },
            "format": {
              "type": "string",
              "enum": [
                "wav",
                "mp3"
              ],
              "title": "Format"
            }
          },
          "type": "object",
          "required": [
            "data",
            "format"
          ],
          "title": "InputAudio"
        },
        "ItemReference": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "type": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "item_reference"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "id"
          ],
          "title": "ItemReference"
        },
        "JsonSchemaResponseFormat": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "schema": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Schema"
            },
            "strict": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Strict"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "name"
          ],
          "title": "JsonSchemaResponseFormat"
        },
        "LocalShell": {
          "properties": {
            "type": {
              "type": "string",
              "const": "local_shell",
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "LocalShell"
        },
        "LocalShellCall": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "action": {
              "$ref": "#/components/schemas/LocalShellCallAction"
            },
            "call_id": {
              "type": "string",
              "title": "Call Id"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "title": "Status"
            },
            "type": {
              "type": "string",
              "const": "local_shell_call",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "id",
            "action",
            "call_id",
            "status",
            "type"
          ],
          "title": "LocalShellCall"
        },
        "LocalShellCallAction": {
          "properties": {
            "command": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Command"
            },
            "env": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Env"
            },
            "type": {
              "type": "string",
              "const": "exec",
              "title": "Type"
            },
            "timeout_ms": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Timeout Ms"
            },
            "user": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User"
            },
            "working_directory": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Working Directory"
            }
          },
          "type": "object",
          "required": [
            "command",
            "env",
            "type"
          ],
          "title": "LocalShellCallAction"
        },
        "LocalShellCallOutput": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "output": {
              "type": "string",
              "title": "Output"
            },
            "type": {
              "type": "string",
              "const": "local_shell_call_output",
              "title": "Type"
            },
            "status": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "in_progress",
                    "completed",
                    "incomplete"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          "type": "object",
          "required": [
            "id",
            "output",
            "type"
          ],
          "title": "LocalShellCallOutput"
        },
        "LogitsProcessorConstructor": {
          "properties": {
            "qualname": {
              "type": "string",
              "title": "Qualname"
            },
            "args": {
              "anyOf": [
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Args"
            },
            "kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Kwargs"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "qualname"
          ],
          "title": "LogitsProcessorConstructor"
        },
        "Logprob": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            },
            "bytes": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Bytes"
            },
            "logprob": {
              "type": "number",
              "title": "Logprob"
            },
            "top_logprobs": {
              "items": {
                "$ref": "#/components/schemas/LogprobTopLogprob"
              },
              "type": "array",
              "title": "Top Logprobs"
            }
          },
          "type": "object",
          "required": [
            "token",
            "bytes",
            "logprob",
            "top_logprobs"
          ],
          "title": "Logprob"
        },
        "LogprobTopLogprob": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            },
            "bytes": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Bytes"
            },
            "logprob": {
              "type": "number",
              "title": "Logprob"
            }
          },
          "type": "object",
          "required": [
            "token",
            "bytes",
            "logprob"
          ],
          "title": "LogprobTopLogprob"
        },
        "Mcp": {
          "properties": {
            "server_label": {
              "type": "string",
              "title": "Server Label"
            },
            "server_url": {
              "type": "string",
              "title": "Server Url"
            },
            "type": {
              "type": "string",
              "const": "mcp",
              "title": "Type"
            },
            "allowed_tools": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "$ref": "#/components/schemas/McpAllowedToolsMcpAllowedToolsFilter"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Allowed Tools"
            },
            "headers": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Headers"
            },
            "require_approval": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/McpRequireApprovalMcpToolApprovalFilter"
                },
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Require Approval"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "server_label",
            "server_url",
            "type"
          ],
          "title": "Mcp"
        },
        "McpAllowedToolsMcpAllowedToolsFilter": {
          "properties": {
            "tool_names": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Names"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "McpAllowedToolsMcpAllowedToolsFilter"
        },
        "McpApprovalRequest": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "arguments": {
              "type": "string",
              "title": "Arguments"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "server_label": {
              "type": "string",
              "title": "Server Label"
            },
            "type": {
              "type": "string",
              "const": "mcp_approval_request",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "id",
            "arguments",
            "name",
            "server_label",
            "type"
          ],
          "title": "McpApprovalRequest"
        },
        "McpApprovalResponse": {
          "properties": {
            "approval_request_id": {
              "type": "string",
              "title": "Approval Request Id"
            },
            "approve": {
              "type": "boolean",
              "title": "Approve"
            },
            "type": {
              "type": "string",
              "const": "mcp_approval_response",
              "title": "Type"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "reason": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reason"
            }
          },
          "type": "object",
          "required": [
            "approval_request_id",
            "approve",
            "type"
          ],
          "title": "McpApprovalResponse"
        },
        "McpCall": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "arguments": {
              "type": "string",
              "title": "Arguments"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "server_label": {
              "type": "string",
              "title": "Server Label"
            },
            "type": {
              "type": "string",
              "const": "mcp_call",
              "title": "Type"
            },
            "error": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output"
            }
          },
          "type": "object",
          "required": [
            "id",
            "arguments",
            "name",
            "server_label",
            "type"
          ],
          "title": "McpCall"
        },
        "McpListTools": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "server_label": {
              "type": "string",
              "title": "Server Label"
            },
            "tools": {
              "items": {
                "$ref": "#/components/schemas/McpListToolsTool"
              },
              "type": "array",
              "title": "Tools"
            },
            "type": {
              "type": "string",
              "const": "mcp_list_tools",
              "title": "Type"
            },
            "error": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            }
          },
          "type": "object",
          "required": [
            "id",
            "server_label",
            "tools",
            "type"
          ],
          "title": "McpListTools"
        },
        "McpListToolsTool": {
          "properties": {
            "input_schema": {
              "title": "Input Schema"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "annotations": {
              "anyOf": [
                {},
                {
                  "type": "null"
                }
              ],
              "title": "Annotations"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            }
          },
          "type": "object",
          "required": [
            "input_schema",
            "name"
          ],
          "title": "McpListToolsTool"
        },
        "McpRequireApprovalMcpToolApprovalFilter": {
          "properties": {
            "always": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/McpRequireApprovalMcpToolApprovalFilterAlways"
                },
                {
                  "type": "null"
                }
              ]
            },
            "never": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/McpRequireApprovalMcpToolApprovalFilterNever"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "McpRequireApprovalMcpToolApprovalFilter"
        },
        "McpRequireApprovalMcpToolApprovalFilterAlways": {
          "properties": {
            "tool_names": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Names"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "McpRequireApprovalMcpToolApprovalFilterAlways"
        },
        "McpRequireApprovalMcpToolApprovalFilterNever": {
          "properties": {
            "tool_names": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Names"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "McpRequireApprovalMcpToolApprovalFilterNever"
        },
        "Message": {
          "properties": {
            "content": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ResponseInputTextParam"
                  },
                  {
                    "$ref": "#/components/schemas/ResponseInputImageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ResponseInputFileParam"
                  }
                ]
              },
              "type": "array",
              "title": "Content"
            },
            "role": {
              "type": "string",
              "enum": [
                "user",
                "system",
                "developer"
              ],
              "title": "Role"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "title": "Status"
            },
            "type": {
              "type": "string",
              "const": "message",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "content",
            "role"
          ],
          "title": "Message"
        },
        "PendingSafetyCheck": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "code": {
              "type": "string",
              "title": "Code"
            },
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "id",
            "code",
            "message"
          ],
          "title": "PendingSafetyCheck"
        },
        "RankingOptions": {
          "properties": {
            "ranker": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto",
                    "default-2024-11-15"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ranker"
            },
            "score_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Score Threshold"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "RankingOptions"
        },
        "Reasoning": {
          "properties": {
            "effort": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Effort"
            },
            "generate_summary": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto",
                    "concise",
                    "detailed"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generate Summary"
            },
            "summary": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto",
                    "concise",
                    "detailed"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Summary"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Reasoning"
        },
        "RerankRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "query": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ScoreMultiModalParam"
                }
              ],
              "title": "Query"
            },
            "documents": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "$ref": "#/components/schemas/ScoreMultiModalParam"
                }
              ],
              "title": "Documents"
            },
            "top_n": {
              "type": "integer",
              "title": "Top N"
            },
            "truncate_prompt_tokens": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": -1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Truncate Prompt Tokens"
            },
            "mm_processor_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mm Processor Kwargs",
              "description": "Additional kwargs to pass to the HF processor."
            },
            "priority": {
              "type": "integer",
              "title": "Priority",
              "description": "The priority of the request (lower means earlier handling; default: 0). Any priority other than 0 will raise an error if the served model does not use priority scheduling.",
              "default": 0
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "query",
            "documents"
          ],
          "title": "RerankRequest"
        },
        "ResponseCodeInterpreterToolCallParam": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "code": {
              "type": "string",
              "title": "Code"
            },
            "results": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ResultLogs"
                  },
                  {
                    "$ref": "#/components/schemas/ResultFiles"
                  }
                ]
              },
              "type": "array",
              "title": "Results"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "interpreting",
                "completed"
              ],
              "title": "Status"
            },
            "type": {
              "type": "string",
              "const": "code_interpreter_call",
              "title": "Type"
            },
            "container_id": {
              "type": "string",
              "title": "Container Id"
            }
          },
          "type": "object",
          "required": [
            "id",
            "code",
            "results",
            "status",
            "type"
          ],
          "title": "ResponseCodeInterpreterToolCallParam"
        },
        "ResponseComputerToolCallOutputScreenshotParam": {
          "properties": {
            "type": {
              "type": "string",
              "const": "computer_screenshot",
              "title": "Type"
            },
            "file_id": {
              "type": "string",
              "title": "File Id"
            },
            "image_url": {
              "type": "string",
              "title": "Image Url"
            }
          },
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ResponseComputerToolCallOutputScreenshotParam"
        },
        "ResponseComputerToolCallParam": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "action": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ActionClick"
                },
                {
                  "$ref": "#/components/schemas/ActionDoubleClick"
                },
                {
                  "$ref": "#/components/schemas/ActionDrag"
                },
                {
                  "$ref": "#/components/schemas/ActionKeypress"
                },
                {
                  "$ref": "#/components/schemas/ActionMove"
                },
                {
                  "$ref": "#/components/schemas/ActionScreenshot"
                },
                {
                  "$ref": "#/components/schemas/ActionScroll"
                },
                {
                  "$ref": "#/components/schemas/ActionType"
                },
                {
                  "$ref": "#/components/schemas/ActionWait"
                }
              ],
              "title": "Action"
            },
            "call_id": {
              "type": "string",
              "title": "Call Id"
            },
            "pending_safety_checks": {
              "items": {
                "$ref": "#/components/schemas/PendingSafetyCheck"
              },
              "type": "array",
              "title": "Pending Safety Checks"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "title": "Status"
            },
            "type": {
              "type": "string",
              "const": "computer_call",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "id",
            "action",
            "call_id",
            "pending_safety_checks",
            "status",
            "type"
          ],
          "title": "ResponseComputerToolCallParam"
        },
        "ResponseFileSearchToolCallParam": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "queries": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Queries"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "searching",
                "completed",
                "incomplete",
                "failed"
              ],
              "title": "Status"
            },
            "type": {
              "type": "string",
              "const": "file_search_call",
              "title": "Type"
            },
            "results": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/Result"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Results"
            }
          },
          "type": "object",
          "required": [
            "id",
            "queries",
            "status",
            "type"
          ],
          "title": "ResponseFileSearchToolCallParam"
        },
        "ResponseFormat": {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "text",
                "json_object",
                "json_schema"
              ],
              "title": "Type"
            },
            "json_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/JsonSchemaResponseFormat"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ResponseFormat"
        },
        "ResponseFormatJSONObject": {
          "properties": {
            "type": {
              "type": "string",
              "const": "json_object",
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ResponseFormatJSONObject"
        },
        "ResponseFormatText": {
          "properties": {
            "type": {
              "type": "string",
              "const": "text",
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ResponseFormatText"
        },
        "ResponseFormatTextJSONSchemaConfig": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "schema": {
              "additionalProperties": true,
              "type": "object",
              "title": "Schema"
            },
            "type": {
              "type": "string",
              "const": "json_schema",
              "title": "Type"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "strict": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Strict"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "name",
            "schema",
            "type"
          ],
          "title": "ResponseFormatTextJSONSchemaConfig"
        },
        "ResponseFunctionToolCallParam": {
          "properties": {
            "arguments": {
              "type": "string",
              "title": "Arguments"
            },
            "call_id": {
              "type": "string",
              "title": "Call Id"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "type": {
              "type": "string",
              "const": "function_call",
              "title": "Type"
            },
            "id": {
              "type": "string",
              "title": "Id"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "title": "Status"
            }
          },
          "type": "object",
          "required": [
            "arguments",
            "call_id",
            "name",
            "type"
          ],
          "title": "ResponseFunctionToolCallParam"
        },
        "ResponseFunctionWebSearchParam": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "searching",
                "completed",
                "failed"
              ],
              "title": "Status"
            },
            "type": {
              "type": "string",
              "const": "web_search_call",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "id",
            "status",
            "type"
          ],
          "title": "ResponseFunctionWebSearchParam"
        },
        "ResponseInputFile": {
          "properties": {
            "type": {
              "type": "string",
              "const": "input_file",
              "title": "Type"
            },
            "file_data": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Data"
            },
            "file_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Id"
            },
            "filename": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filename"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ResponseInputFile"
        },
        "ResponseInputFileParam": {
          "properties": {
            "type": {
              "type": "string",
              "const": "input_file",
              "title": "Type"
            },
            "file_data": {
              "type": "string",
              "title": "File Data"
            },
            "file_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Id"
            },
            "filename": {
              "type": "string",
              "title": "Filename"
            }
          },
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ResponseInputFileParam"
        },
        "ResponseInputImage": {
          "properties": {
            "detail": {
              "type": "string",
              "enum": [
                "low",
                "high",
                "auto"
              ],
              "title": "Detail"
            },
            "type": {
              "type": "string",
              "const": "input_image",
              "title": "Type"
            },
            "file_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Id"
            },
            "image_url": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Image Url"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "detail",
            "type"
          ],
          "title": "ResponseInputImage"
        },
        "ResponseInputImageParam": {
          "properties": {
            "detail": {
              "type": "string",
              "enum": [
                "low",
                "high",
                "auto"
              ],
              "title": "Detail"
            },
            "type": {
              "type": "string",
              "const": "input_image",
              "title": "Type"
            },
            "file_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Id"
            },
            "image_url": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Image Url"
            }
          },
          "type": "object",
          "required": [
            "detail",
            "type"
          ],
          "title": "ResponseInputImageParam"
        },
        "ResponseInputText": {
          "properties": {
            "text": {
              "type": "string",
              "title": "Text"
            },
            "type": {
              "type": "string",
              "const": "input_text",
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "text",
            "type"
          ],
          "title": "ResponseInputText"
        },
        "ResponseInputTextParam": {
          "properties": {
            "text": {
              "type": "string",
              "title": "Text"
            },
            "type": {
              "type": "string",
              "const": "input_text",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "text",
            "type"
          ],
          "title": "ResponseInputTextParam"
        },
        "ResponseOutputMessageParam": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "content": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ResponseOutputTextParam"
                  },
                  {
                    "$ref": "#/components/schemas/ResponseOutputRefusalParam"
                  }
                ]
              },
              "type": "array",
              "title": "Content"
            },
            "role": {
              "type": "string",
              "const": "assistant",
              "title": "Role"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "title": "Status"
            },
            "type": {
              "type": "string",
              "const": "message",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "id",
            "content",
            "role",
            "status",
            "type"
          ],
          "title": "ResponseOutputMessageParam"
        },
        "ResponseOutputRefusalParam": {
          "properties": {
            "refusal": {
              "type": "string",
              "title": "Refusal"
            },
            "type": {
              "type": "string",
              "const": "refusal",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "refusal",
            "type"
          ],
          "title": "ResponseOutputRefusalParam"
        },
        "ResponseOutputTextParam": {
          "properties": {
            "annotations": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AnnotationFileCitation"
                  },
                  {
                    "$ref": "#/components/schemas/AnnotationURLCitation"
                  },
                  {
                    "$ref": "#/components/schemas/AnnotationContainerFileCitation"
                  },
                  {
                    "$ref": "#/components/schemas/AnnotationFilePath"
                  }
                ]
              },
              "type": "array",
              "title": "Annotations"
            },
            "text": {
              "type": "string",
              "title": "Text"
            },
            "type": {
              "type": "string",
              "const": "output_text",
              "title": "Type"
            },
            "logprobs": {
              "items": {
                "$ref": "#/components/schemas/Logprob"
              },
              "type": "array",
              "title": "Logprobs"
            }
          },
          "type": "object",
          "required": [
            "annotations",
            "text",
            "type"
          ],
          "title": "ResponseOutputTextParam"
        },
        "ResponsePrompt": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "variables": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseInputText"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseInputImage"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseInputFile"
                      }
                    ]
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Variables"
            },
            "version": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "id"
          ],
          "title": "ResponsePrompt"
        },
        "ResponseReasoningItemParam": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "summary": {
              "items": {
                "$ref": "#/components/schemas/Summary"
              },
              "type": "array",
              "title": "Summary"
            },
            "type": {
              "type": "string",
              "const": "reasoning",
              "title": "Type"
            },
            "encrypted_content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Encrypted Content"
            },
            "status": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "title": "Status"
            }
          },
          "type": "object",
          "required": [
            "id",
            "summary",
            "type"
          ],
          "title": "ResponseReasoningItemParam"
        },
        "ResponseTextConfig": {
          "properties": {
            "format": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResponseFormatText"
                },
                {
                  "$ref": "#/components/schemas/ResponseFormatTextJSONSchemaConfig"
                },
                {
                  "$ref": "#/components/schemas/ResponseFormatJSONObject"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Format"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "ResponseTextConfig"
        },
        "ResponsesRequest": {
          "properties": {
            "background": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Background",
              "default": false
            },
            "include": {
              "anyOf": [
                {
                  "items": {
                    "type": "string",
                    "enum": [
                      "code_interpreter_call.outputs",
                      "computer_call_output.output.image_url",
                      "file_search_call.results",
                      "message.input_image.image_url",
                      "message.output_text.logprobs",
                      "reasoning.encrypted_content"
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/EasyInputMessageParam"
                      },
                      {
                        "$ref": "#/components/schemas/Message"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseOutputMessageParam"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseFileSearchToolCallParam"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseComputerToolCallParam"
                      },
                      {
                        "$ref": "#/components/schemas/ComputerCallOutput"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseFunctionWebSearchParam"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseFunctionToolCallParam"
                      },
                      {
                        "$ref": "#/components/schemas/FunctionCallOutput"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseReasoningItemParam"
                      },
                      {
                        "$ref": "#/components/schemas/ImageGenerationCall"
                      },
                      {
                        "$ref": "#/components/schemas/ResponseCodeInterpreterToolCallParam"
                      },
                      {
                        "$ref": "#/components/schemas/LocalShellCall"
                      },
                      {
                        "$ref": "#/components/schemas/LocalShellCallOutput"
                      },
                      {
                        "$ref": "#/components/schemas/McpListTools"
                      },
                      {
                        "$ref": "#/components/schemas/McpApprovalRequest"
                      },
                      {
                        "$ref": "#/components/schemas/McpApprovalResponse"
                      },
                      {
                        "$ref": "#/components/schemas/McpCall"
                      },
                      {
                        "$ref": "#/components/schemas/ItemReference"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Input"
            },
            "instructions": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Instructions"
            },
            "max_output_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Output Tokens"
            },
            "max_tool_calls": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Tool Calls"
            },
            "metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metadata"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "parallel_tool_calls": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Parallel Tool Calls",
              "default": true
            },
            "previous_response_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Previous Response Id"
            },
            "prompt": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResponsePrompt"
                },
                {
                  "type": "null"
                }
              ]
            },
            "reasoning": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Reasoning"
                },
                {
                  "type": "null"
                }
              ]
            },
            "service_tier": {
              "type": "string",
              "enum": [
                "auto",
                "default",
                "flex",
                "scale",
                "priority"
              ],
              "title": "Service Tier",
              "default": "auto"
            },
            "store": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Store",
              "default": true
            },
            "stream": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream",
              "default": false
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            },
            "text": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResponseTextConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tool_choice": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "none",
                    "auto",
                    "required"
                  ]
                },
                {
                  "$ref": "#/components/schemas/ToolChoiceTypes"
                },
                {
                  "$ref": "#/components/schemas/ToolChoiceFunction"
                }
              ],
              "title": "Tool Choice",
              "default": "auto"
            },
            "tools": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FunctionTool"
                  },
                  {
                    "$ref": "#/components/schemas/FileSearchTool"
                  },
                  {
                    "$ref": "#/components/schemas/WebSearchTool"
                  },
                  {
                    "$ref": "#/components/schemas/ComputerTool"
                  },
                  {
                    "$ref": "#/components/schemas/Mcp"
                  },
                  {
                    "$ref": "#/components/schemas/CodeInterpreter"
                  },
                  {
                    "$ref": "#/components/schemas/ImageGeneration"
                  },
                  {
                    "$ref": "#/components/schemas/LocalShell"
                  }
                ]
              },
              "type": "array",
              "title": "Tools"
            },
            "top_logprobs": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top Logprobs",
              "default": 0
            },
            "top_p": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top P"
            },
            "truncation": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto",
                    "disabled"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Truncation",
              "default": "disabled"
            },
            "user": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User"
            },
            "request_id": {
              "type": "string",
              "title": "Request Id",
              "description": "The request_id related to this request. If the caller does not set it, a random_uuid will be generated. This id is used through out the inference process and return in response."
            },
            "mm_processor_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mm Processor Kwargs",
              "description": "Additional kwargs to pass to the HF processor."
            },
            "priority": {
              "type": "integer",
              "title": "Priority",
              "description": "The priority of the request (lower means earlier handling; default: 0). Any priority other than 0 will raise an error if the served model does not use priority scheduling.",
              "default": 0
            },
            "cache_salt": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cache Salt",
              "description": "If specified, the prefix cache will be salted with the provided string to prevent an attacker to guess prompts in multi-user environments. The salt should be random, protected from access by 3rd parties, and long enough to be unpredictable (e.g., 43 characters base64-encoded, corresponding to 256 bit). Not supported by vLLM engine V0."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "input"
          ],
          "title": "ResponsesRequest"
        },
        "Result": {
          "properties": {
            "attributes": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Attributes"
            },
            "file_id": {
              "type": "string",
              "title": "File Id"
            },
            "filename": {
              "type": "string",
              "title": "Filename"
            },
            "score": {
              "type": "number",
              "title": "Score"
            },
            "text": {
              "type": "string",
              "title": "Text"
            }
          },
          "type": "object",
          "title": "Result"
        },
        "ResultFiles": {
          "properties": {
            "files": {
              "items": {
                "$ref": "#/components/schemas/ResultFilesFile"
              },
              "type": "array",
              "title": "Files"
            },
            "type": {
              "type": "string",
              "const": "files",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "files",
            "type"
          ],
          "title": "ResultFiles"
        },
        "ResultFilesFile": {
          "properties": {
            "file_id": {
              "type": "string",
              "title": "File Id"
            },
            "mime_type": {
              "type": "string",
              "title": "Mime Type"
            }
          },
          "type": "object",
          "required": [
            "file_id",
            "mime_type"
          ],
          "title": "ResultFilesFile"
        },
        "ResultLogs": {
          "properties": {
            "logs": {
              "type": "string",
              "title": "Logs"
            },
            "type": {
              "type": "string",
              "const": "logs",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "logs",
            "type"
          ],
          "title": "ResultLogs"
        },
        "ScoreMultiModalParam": {
          "properties": {
            "content": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionContentPartImageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionContentPartImageEmbedsParam"
                  }
                ]
              },
              "type": "array",
              "title": "Content"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "ScoreMultiModalParam",
          "description": "A specialized parameter type for scoring multimodal content\n\nThe reasons why don't reuse `CustomChatCompletionMessageParam` directly:\n1. Score tasks don't need the 'role' field (user/assistant/system) that's required in chat completions\n2. Including chat-specific fields would confuse users about their purpose in scoring\n3. This is a more focused interface that only exposes what's needed for scoring"
        },
        "ScoreRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "text_1": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ScoreMultiModalParam"
                }
              ],
              "title": "Text 1"
            },
            "text_2": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ScoreMultiModalParam"
                }
              ],
              "title": "Text 2"
            },
            "truncate_prompt_tokens": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": -1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Truncate Prompt Tokens"
            },
            "mm_processor_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mm Processor Kwargs",
              "description": "Additional kwargs to pass to the HF processor."
            },
            "priority": {
              "type": "integer",
              "title": "Priority",
              "description": "The priority of the request (lower means earlier handling; default: 0). Any priority other than 0 will raise an error if the served model does not use priority scheduling.",
              "default": 0
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "text_1",
            "text_2"
          ],
          "title": "ScoreRequest"
        },
        "StreamOptions": {
          "properties": {
            "include_usage": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Usage",
              "default": true
            },
            "continuous_usage_stats": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Continuous Usage Stats",
              "default": false
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "StreamOptions"
        },
        "StructuralTag": {
          "properties": {
            "begin": {
              "type": "string",
              "title": "Begin"
            },
            "schema": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Schema"
            },
            "end": {
              "type": "string",
              "title": "End"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "begin",
            "end"
          ],
          "title": "StructuralTag"
        },
        "StructuralTagResponseFormat": {
          "properties": {
            "type": {
              "type": "string",
              "const": "structural_tag",
              "title": "Type"
            },
            "structures": {
              "items": {
                "$ref": "#/components/schemas/StructuralTag"
              },
              "type": "array",
              "title": "Structures"
            },
            "triggers": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Triggers"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type",
            "structures",
            "triggers"
          ],
          "title": "StructuralTagResponseFormat"
        },
        "Summary": {
          "properties": {
            "text": {
              "type": "string",
              "title": "Text"
            },
            "type": {
              "type": "string",
              "const": "summary_text",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "text",
            "type"
          ],
          "title": "Summary"
        },
        "TokenizeChatRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "messages": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionDeveloperMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionSystemMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionUserMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionAssistantMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionToolMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionFunctionMessageParam"
                  },
                  {
                    "$ref": "#/components/schemas/CustomChatCompletionMessageParam"
                  }
                ]
              },
              "type": "array",
              "title": "Messages"
            },
            "add_generation_prompt": {
              "type": "boolean",
              "title": "Add Generation Prompt",
              "description": "If true, the generation prompt will be added to the chat template. This is a parameter used by chat template in tokenizer config of the model.",
              "default": true
            },
            "return_token_strs": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Return Token Strs",
              "description": "If true, also return the token strings corresponding to the token ids.",
              "default": false
            },
            "continue_final_message": {
              "type": "boolean",
              "title": "Continue Final Message",
              "description": "If this is set, the chat will be formatted so that the final message in the chat is open-ended, without any EOS tokens. The model will continue this message rather than starting a new one. This allows you to \"prefill\" part of the model's response for it. Cannot be used at the same time as `add_generation_prompt`.",
              "default": false
            },
            "add_special_tokens": {
              "type": "boolean",
              "title": "Add Special Tokens",
              "description": "If true, special tokens (e.g. BOS) will be added to the prompt on top of what is added by the chat template. For most models, the chat template takes care of adding the special tokens so this should be set to false (as is the default).",
              "default": false
            },
            "chat_template": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chat Template",
              "description": "A Jinja template to use for this conversion. As of transformers v4.44, default chat template is no longer allowed, so you must provide a chat template if the tokenizer does not define one."
            },
            "chat_template_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chat Template Kwargs",
              "description": "Additional keyword args to pass to the template renderer. Will be accessible by the chat template."
            },
            "mm_processor_kwargs": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mm Processor Kwargs",
              "description": "Additional kwargs to pass to the HF processor."
            },
            "tools": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/ChatCompletionToolsParam"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools",
              "description": "A list of tools the model may call."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "messages"
          ],
          "title": "TokenizeChatRequest"
        },
        "TokenizeCompletionRequest": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "prompt": {
              "type": "string",
              "title": "Prompt"
            },
            "add_special_tokens": {
              "type": "boolean",
              "title": "Add Special Tokens",
              "description": "If true (the default), special tokens (e.g. BOS) will be added to the prompt.",
              "default": true
            },
            "return_token_strs": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Return Token Strs",
              "description": "If true, also return the token strings corresponding to the token ids.",
              "default": false
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "prompt"
          ],
          "title": "TokenizeCompletionRequest"
        },
        "ToolChoiceFunction": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "type": {
              "type": "string",
              "const": "function",
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "name",
            "type"
          ],
          "title": "ToolChoiceFunction"
        },
        "ToolChoiceTypes": {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "file_search",
                "web_search_preview",
                "computer_use_preview",
                "web_search_preview_2025_03_11",
                "image_generation",
                "code_interpreter",
                "mcp"
              ],
              "title": "Type"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ToolChoiceTypes"
        },
        "TranscriptionRequest": {
          "properties": {
            "file": {
              "type": "string",
              "format": "binary",
              "title": "File"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "language": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Language"
            },
            "prompt": {
              "type": "string",
              "title": "Prompt",
              "default": ""
            },
            "response_format": {
              "type": "string",
              "enum": [
                "json",
                "text",
                "srt",
                "verbose_json",
                "vtt"
              ],
              "title": "Response Format",
              "default": "json"
            },
            "timestamp_granularities[]": {
              "items": {
                "type": "string",
                "enum": [
                  "word",
                  "segment"
                ]
              },
              "type": "array",
              "title": "Timestamp Granularities[]",
              "default": []
            },
            "stream": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream",
              "default": false
            },
            "stream_include_usage": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream Include Usage",
              "default": false
            },
            "stream_continuous_usage_stats": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream Continuous Usage Stats",
              "default": false
            },
            "vllm_xargs": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Vllm Xargs",
              "description": "Additional request parameters with string or numeric values, used by custom extensions."
            },
            "temperature": {
              "type": "number",
              "title": "Temperature",
              "default": 0
            },
            "top_p": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top P"
            },
            "top_k": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top K"
            },
            "min_p": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min P"
            },
            "seed": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 9223372036854776000,
                  "minimum": -9223372036854776000
                },
                {
                  "type": "null"
                }
              ],
              "title": "Seed"
            },
            "frequency_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Frequency Penalty",
              "default": 0
            },
            "repetition_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Repetition Penalty"
            },
            "presence_penalty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Presence Penalty",
              "default": 0
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "file"
          ],
          "title": "TranscriptionRequest"
        },
        "TranslationRequest": {
          "properties": {
            "file": {
              "type": "string",
              "format": "binary",
              "title": "File"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "prompt": {
              "type": "string",
              "title": "Prompt",
              "default": ""
            },
            "response_format": {
              "type": "string",
              "enum": [
                "json",
                "text",
                "srt",
                "verbose_json",
                "vtt"
              ],
              "title": "Response Format",
              "default": "json"
            },
            "temperature": {
              "type": "number",
              "title": "Temperature",
              "default": 0
            },
            "language": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Language"
            },
            "stream": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream",
              "default": false
            },
            "stream_include_usage": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream Include Usage",
              "default": false
            },
            "stream_continuous_usage_stats": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stream Continuous Usage Stats",
              "default": false
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "file"
          ],
          "title": "TranslationRequest"
        },
        "UserLocation": {
          "properties": {
            "type": {
              "type": "string",
              "const": "approximate",
              "title": "Type"
            },
            "city": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "City"
            },
            "country": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Country"
            },
            "region": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Region"
            },
            "timezone": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Timezone"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "UserLocation"
        },
        "ValidationError": {
          "properties": {
            "loc": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "type": "array",
              "title": "Location"
            },
            "msg": {
              "type": "string",
              "title": "Message"
            },
            "type": {
              "type": "string",
              "title": "Error Type"
            }
          },
          "type": "object",
          "required": [
            "loc",
            "msg",
            "type"
          ],
          "title": "ValidationError"
        },
        "VideoURL": {
          "properties": {
            "url": {
              "type": "string",
              "title": "Url"
            }
          },
          "type": "object",
          "required": [
            "url"
          ],
          "title": "VideoURL"
        },
        "WebSearchTool": {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "web_search_preview",
                "web_search_preview_2025_03_11"
              ],
              "title": "Type"
            },
            "search_context_size": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search Context Size"
            },
            "user_location": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserLocation"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "type"
          ],
          "title": "WebSearchTool"
        }
      }
    }
  }